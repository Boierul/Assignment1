@page "/AdultsList"

@using Assignment1.Models
@using Assignment1.Data

@inject IAdult Adult
@inject NavigationManager NavigationManager

<h3>
    AdultsList <button @onclick="AddAdult" class="btn btn-outline-dark" type="submit">Add</button>
</h3>

<p>
    Filter by AdultID: <input type="number" @oninput="@((arg) => FilterByAdultId(arg))" style="width:50px"/>
</p>

@if (Persons == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!Persons.Any())
{
    <p>
        <em>There are'nt any persons. Please add some.</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Adult ID</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Hair Color</th>
            <th>Eye Color</th>
            <th>Age</th>
            <th>Weight</th>
            <th>Sex</th>
            <th>Remove</th>
            @* <th>Edit</th> *@
        </tr>
        </thead>
        <tbody>

        @foreach (var person in Persons)
        {
            <tr>
                <td>@person.Id</td>
                <td>@person.FirstName</td>
                <td>@person.LastName</td>
                <td>@person.HairColor</td>
                <td>@person.EyeColor</td>
                <td>@person.Age</td>
                <td>@person.Weight</td>
                <td>@person.Sex</td>
                <td>
                    <button @onclick="@(() => RemoveAdult(person.Id))">
                        <i class="oi oi-trash" style="color:red"/>
                    </button>
                </td>
                @* <td> *@
                @*     <button @onclick="@(() => EditTodo(person.TodoId))"> *@
                @*         <i class="oi oi-pencil" style="color:#1b6ec2"/> *@
                @*     </button> *@
                @* </td> *@
            </tr>
        }
        </tbody>
    </table>
}


@code {

    public IList<Person> Persons { get; set; }
    public Person Person { get; set; }

    private IList<Person> allPersons;

    private int? filterById;

    protected override async Task OnInitializedAsync()
    {
        Persons = Adult.Persons;
    }

    public void AddAdult()
    {
        NavigationManager.NavigateTo("/AddAdult");
    }

    private void RemoveAdult(int personId)
    {
        Person personToRemove = Persons.First(t => t.Id == personId);
        Adult.RemovePerson(personId);
        allPersons.Remove(personToRemove);
        Persons.Remove(personToRemove);
    }
    
    private void FilterByAdultId(ChangeEventArgs changeEventArgs)
    {
        filterById = null;
        try
        {
            filterById = int.Parse(changeEventArgs.Value.ToString());
        }
        catch (Exception e)
        {
        }

        ExecuteFilter();
    }

    // Apply the filter for the input given by the user
    private void ExecuteFilter()
    {
        Persons = allPersons.Where(t => (filterById != null && t.Id == filterById || filterById == null)).ToList();
    }


}